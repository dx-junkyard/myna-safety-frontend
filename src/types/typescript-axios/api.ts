/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppModelsUserReportDomainLocation
 */
export interface AppModelsUserReportDomainLocation {
    /**
     * 経度
     * @type {number}
     * @memberof AppModelsUserReportDomainLocation
     */
    'longitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof AppModelsUserReportDomainLocation
     */
    'latitude': number;
}
/**
 * 
 * @export
 * @interface AppModelsUserReportFeedbackDomainLocation
 */
export interface AppModelsUserReportFeedbackDomainLocation {
    /**
     * 経度
     * @type {number}
     * @memberof AppModelsUserReportFeedbackDomainLocation
     */
    'longitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof AppModelsUserReportFeedbackDomainLocation
     */
    'latitude': number;
}
/**
 * 
 * @export
 * @interface EntryUserReportFeedBackCommentRequest
 */
export interface EntryUserReportFeedBackCommentRequest {
    /**
     * 投稿者のユーザID
     * @type {string}
     * @memberof EntryUserReportFeedBackCommentRequest
     */
    'user_id': string;
    /**
     * 
     * @type {Location}
     * @memberof EntryUserReportFeedBackCommentRequest
     */
    'location'?: Location;
    /**
     * コメント内容
     * @type {string}
     * @memberof EntryUserReportFeedBackCommentRequest
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface EntryUserReportFeedBackCommentResponse
 */
export interface EntryUserReportFeedBackCommentResponse {
    /**
     * コメントID
     * @type {string}
     * @memberof EntryUserReportFeedBackCommentResponse
     */
    'user_report_feedback_comment_id': string;
}
/**
 * 
 * @export
 * @interface EntryUserReportFeedBackReactionRequest
 */
export interface EntryUserReportFeedBackReactionRequest {
    /**
     * 投稿者のユーザID
     * @type {string}
     * @memberof EntryUserReportFeedBackReactionRequest
     */
    'user_id': string;
    /**
     * 
     * @type {Location}
     * @memberof EntryUserReportFeedBackReactionRequest
     */
    'location'?: Location;
    /**
     * リアクション内容(フロントで表示を切り替えるためここでは任意の文字列を入れる)
     * @type {string}
     * @memberof EntryUserReportFeedBackReactionRequest
     */
    'reaction'?: string;
}
/**
 * 
 * @export
 * @interface EntryUserReportFeedBackReactionResponse
 */
export interface EntryUserReportFeedBackReactionResponse {
    /**
     * リアクションID
     * @type {string}
     * @memberof EntryUserReportFeedBackReactionResponse
     */
    'user_report_feedback_reaction_id': string;
}
/**
 * ユーザ通知リクエストに含める項目
 * @export
 * @interface EntryUserReportRequest
 */
export interface EntryUserReportRequest {
    /**
     * UserID、LINEのIDなど？
     * @type {string}
     * @memberof EntryUserReportRequest
     */
    'user_id': string;
    /**
     * 
     * @type {Location1}
     * @memberof EntryUserReportRequest
     */
    'location': Location1;
    /**
     * 報告内容、選択式にする？
     * @type {string}
     * @memberof EntryUserReportRequest
     */
    'content'?: string;
}
/**
 * 
 * @export
 * @interface EntryUserReportResponse
 */
export interface EntryUserReportResponse {
    /**
     * 発行された申告ID
     * @type {string}
     * @memberof EntryUserReportResponse
     */
    'user_report_id': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ListUserReportResponse
 */
export interface ListUserReportResponse {
    /**
     * ユーザが申告した情報一覧
     * @type {Array<UserReportModel>}
     * @memberof ListUserReportResponse
     */
    'user_reports'?: Array<UserReportModel>;
}
/**
 * 投稿者の位置情報
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * 経度
     * @type {number}
     * @memberof Location
     */
    'longitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof Location
     */
    'latitude': number;
}
/**
 * 申告者の位置情報
 * @export
 * @interface Location1
 */
export interface Location1 {
    /**
     * 経度
     * @type {number}
     * @memberof Location1
     */
    'longitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof Location1
     */
    'latitude': number;
}
/**
 * 投稿者の位置情報
 * @export
 * @interface Location2
 */
export interface Location2 {
    /**
     * 経度
     * @type {number}
     * @memberof Location2
     */
    'longitude': number;
    /**
     * 緯度
     * @type {number}
     * @memberof Location2
     */
    'latitude': number;
}
/**
 * 
 * @export
 * @interface Location3Inner
 */
export interface Location3Inner {
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ReportLevel = {
    High: 'High',
    Middle: 'Middle',
    Low: 'Low',
    UnKnown: 'UnKnown'
} as const;

export type ReportLevel = typeof ReportLevel[keyof typeof ReportLevel];


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ReportStatus = {
    NoAssign: 'NO ASSIGN',
    InProgress: 'IN PROGRESS',
    Complete: 'COMPLETE',
    Pending: 'PENDING'
} as const;

export type ReportStatus = typeof ReportStatus[keyof typeof ReportStatus];


/**
 * 
 * @export
 * @interface UpdateUserReportResponse
 */
export interface UpdateUserReportResponse {
    /**
     * 発行された申告ID
     * @type {string}
     * @memberof UpdateUserReportResponse
     */
    'user_report_id': string;
}
/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * マイナポータルAPIの暗証番号
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'pass_phrase': string;
}
/**
 * 
 * @export
 * @interface UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     * ユーザID
     * @type {string}
     * @memberof UpdateUserResponse
     */
    'user_id': string;
}
/**
 * ユーザリクエストに対する返信に含める項目
 * @export
 * @interface UserReportFeedbackComment
 */
export interface UserReportFeedbackComment {
    /**
     * コメントID
     * @type {string}
     * @memberof UserReportFeedbackComment
     */
    'user_report_feedback_comment_id': string;
    /**
     * 投稿者のユーザID
     * @type {string}
     * @memberof UserReportFeedbackComment
     */
    'user_id': string;
    /**
     * 
     * @type {Location2}
     * @memberof UserReportFeedbackComment
     */
    'location'?: Location2;
    /**
     * コメント内容
     * @type {string}
     * @memberof UserReportFeedbackComment
     */
    'comment'?: string;
    /**
     * 作成時間
     * @type {string}
     * @memberof UserReportFeedbackComment
     */
    'created_at'?: string;
    /**
     * 最終更新時間
     * @type {string}
     * @memberof UserReportFeedbackComment
     */
    'updated_at'?: string;
}
/**
 * ユーザリクエストに対するリアクションに含める項目
 * @export
 * @interface UserReportFeedbackReaction
 */
export interface UserReportFeedbackReaction {
    /**
     * リアクションID
     * @type {string}
     * @memberof UserReportFeedbackReaction
     */
    'user_report_feedback_reaction_id': string;
    /**
     * 投稿者のユーザID
     * @type {string}
     * @memberof UserReportFeedbackReaction
     */
    'user_id': string;
    /**
     * 
     * @type {Location2}
     * @memberof UserReportFeedbackReaction
     */
    'location'?: Location2;
    /**
     * リアクション内容(フロントで表示を切り替えるためここでは任意の文字列を入れる)
     * @type {string}
     * @memberof UserReportFeedbackReaction
     */
    'reaction'?: string;
    /**
     * 作成時間
     * @type {string}
     * @memberof UserReportFeedbackReaction
     */
    'created_at'?: string;
    /**
     * 最終更新時間
     * @type {string}
     * @memberof UserReportFeedbackReaction
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface UserReportModel
 */
export interface UserReportModel {
    /**
     * UserID、LINEのIDなど？
     * @type {string}
     * @memberof UserReportModel
     */
    'user_id': string;
    /**
     * 申告ID
     * @type {string}
     * @memberof UserReportModel
     */
    'user_report_id': string;
    /**
     * 
     * @type {Location1}
     * @memberof UserReportModel
     */
    'location': Location1;
    /**
     * 画面に表示されるタイトル。報告内容などからChatGPTから自動で生成される
     * @type {string}
     * @memberof UserReportModel
     */
    'title'?: string;
    /**
     * 報告内容、選択式にする？
     * @type {string}
     * @memberof UserReportModel
     */
    'content': string;
    /**
     * 画像のURL
     * @type {string}
     * @memberof UserReportModel
     */
    'image_url'?: string;
    /**
     * 住所
     * @type {string}
     * @memberof UserReportModel
     */
    'address'?: string;
    /**
     * 
     * @type {ReportLevel}
     * @memberof UserReportModel
     */
    'report_level': ReportLevel;
    /**
     * 
     * @type {ReportStatus}
     * @memberof UserReportModel
     */
    'report_status': ReportStatus;
    /**
     * 申告者のスコア
     * @type {number}
     * @memberof UserReportModel
     */
    'report_score'?: number;
    /**
     * 作成時間
     * @type {string}
     * @memberof UserReportModel
     */
    'created_at'?: string;
    /**
     * 最終更新時間
     * @type {string}
     * @memberof UserReportModel
     */
    'updated_at'?: string;
    /**
     * 申告に対するフィードバックコメント
     * @type {Array<UserReportFeedbackComment>}
     * @memberof UserReportModel
     */
    'user_report_feedback_comments'?: Array<UserReportFeedbackComment>;
    /**
     * 申告に対するリアクション
     * @type {Array<UserReportFeedbackReaction>}
     * @memberof UserReportModel
     */
    'user_report_feedback_reactions'?: Array<UserReportFeedbackReaction>;
}


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<Location3Inner>}
     * @memberof ValidationError
     */
    'loc': Array<Location3Inner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * openapi-generatorの生成用
         * @summary  Dummy Post User Report
         * @param {EntryUserReportRequest} entryUserReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummyPostUserReportDummyReportDummyPostPost: async (entryUserReportRequest: EntryUserReportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryUserReportRequest' is not null or undefined
            assertParamExists('dummyPostUserReportDummyReportDummyPostPost', 'entryUserReportRequest', entryUserReportRequest)
            const localVarPath = `/__dummy_report__dummy_post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryUserReportRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * openapi-generatorの生成用
         * @summary  Dummy Put User Report
         * @param {File} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummyPutUserReportDummyReportDummyPutPut: async (request: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('dummyPutUserReportDummyReportDummyPutPut', 'request', request)
            const localVarPath = `/__dummy_report__dummy_put`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (request !== undefined) { 
                localVarFormParams.append('request', request as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * openapi-generatorの生成用
         * @summary  Dummy Post User Report
         * @param {EntryUserReportRequest} entryUserReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dummyPostUserReportDummyReportDummyPostPost(entryUserReportRequest: EntryUserReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dummyPostUserReportDummyReportDummyPostPost(entryUserReportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * openapi-generatorの生成用
         * @summary  Dummy Put User Report
         * @param {File} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dummyPutUserReportDummyReportDummyPutPut(request: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dummyPutUserReportDummyReportDummyPutPut(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * openapi-generatorの生成用
         * @summary  Dummy Post User Report
         * @param {EntryUserReportRequest} entryUserReportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummyPostUserReportDummyReportDummyPostPost(entryUserReportRequest: EntryUserReportRequest, options?: any): AxiosPromise<any> {
            return localVarFp.dummyPostUserReportDummyReportDummyPostPost(entryUserReportRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * openapi-generatorの生成用
         * @summary  Dummy Put User Report
         * @param {File} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dummyPutUserReportDummyReportDummyPutPut(request: File, options?: any): AxiosPromise<any> {
            return localVarFp.dummyPutUserReportDummyReportDummyPutPut(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * openapi-generatorの生成用
     * @summary  Dummy Post User Report
     * @param {EntryUserReportRequest} entryUserReportRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dummyPostUserReportDummyReportDummyPostPost(entryUserReportRequest: EntryUserReportRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dummyPostUserReportDummyReportDummyPostPost(entryUserReportRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * openapi-generatorの生成用
     * @summary  Dummy Put User Report
     * @param {File} request 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public dummyPutUserReportDummyReportDummyPutPut(request: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).dummyPutUserReportDummyReportDummyPutPut(request, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LineBotApi - axios parameter creator
 * @export
 */
export const LineBotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Line Bot用のエンドポイントです
         * @summary Callback
         * @param {any} [xLineSignature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackCallbackPost: async (xLineSignature?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xLineSignature != null) {
                localVarHeaderParameter['x-line-signature'] = typeof xLineSignature === 'string' 
                    ? xLineSignature 
                    : JSON.stringify(xLineSignature);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LineBotApi - functional programming interface
 * @export
 */
export const LineBotApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LineBotApiAxiosParamCreator(configuration)
    return {
        /**
         * Line Bot用のエンドポイントです
         * @summary Callback
         * @param {any} [xLineSignature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callbackCallbackPost(xLineSignature?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callbackCallbackPost(xLineSignature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LineBotApi - factory interface
 * @export
 */
export const LineBotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LineBotApiFp(configuration)
    return {
        /**
         * Line Bot用のエンドポイントです
         * @summary Callback
         * @param {any} [xLineSignature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callbackCallbackPost(xLineSignature?: any, options?: any): AxiosPromise<any> {
            return localVarFp.callbackCallbackPost(xLineSignature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LineBotApi - object-oriented interface
 * @export
 * @class LineBotApi
 * @extends {BaseAPI}
 */
export class LineBotApi extends BaseAPI {
    /**
     * Line Bot用のエンドポイントです
     * @summary Callback
     * @param {any} [xLineSignature] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LineBotApi
     */
    public callbackCallbackPost(xLineSignature?: any, options?: AxiosRequestConfig) {
        return LineBotApiFp(this.configuration).callbackCallbackPost(xLineSignature, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユースケース2: 申告内容の一覧を取得する
         * @summary Get User Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReportsReportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Post User Report Feedback Comment
         * @param {string} reportId 
         * @param {EntryUserReportFeedBackCommentRequest} entryUserReportFeedBackCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserReportFeedbackCommentReportReportIdFeedbackCommentPost: async (reportId: string, entryUserReportFeedBackCommentRequest: EntryUserReportFeedBackCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('postUserReportFeedbackCommentReportReportIdFeedbackCommentPost', 'reportId', reportId)
            // verify required parameter 'entryUserReportFeedBackCommentRequest' is not null or undefined
            assertParamExists('postUserReportFeedbackCommentReportReportIdFeedbackCommentPost', 'entryUserReportFeedBackCommentRequest', entryUserReportFeedBackCommentRequest)
            const localVarPath = `/report/{report_id}/feedback_comment`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryUserReportFeedBackCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Post User Report Feedback Reaction
         * @param {string} reportId 
         * @param {EntryUserReportFeedBackReactionRequest} entryUserReportFeedBackReactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserReportFeedbackReactionReportReportIdFeedbackReactionPost: async (reportId: string, entryUserReportFeedBackReactionRequest: EntryUserReportFeedBackReactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('postUserReportFeedbackReactionReportReportIdFeedbackReactionPost', 'reportId', reportId)
            // verify required parameter 'entryUserReportFeedBackReactionRequest' is not null or undefined
            assertParamExists('postUserReportFeedbackReactionReportReportIdFeedbackReactionPost', 'entryUserReportFeedBackReactionRequest', entryUserReportFeedBackReactionRequest)
            const localVarPath = `/report/{report_id}/feedback_reaction`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(entryUserReportFeedBackReactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユースケース1: ユーザがHelpを申請する
         * @summary Post User Report
         * @param {EntryUserReportRequest} request 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserReportReportPost: async (request: EntryUserReportRequest, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('postUserReportReportPost', 'request', request)
            const localVarPath = `/report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (request !== undefined) { 
                localVarFormParams.append('request', new Blob([JSON.stringify(request)], { type: "application/json", }));
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユースケース3: ユーザがヘルプ情報を更新する
         * @summary Put User Report
         * @param {string} userReportId 
         * @param {File} request 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserReportReportUserReportIdPut: async (userReportId: string, request: File, file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userReportId' is not null or undefined
            assertParamExists('putUserReportReportUserReportIdPut', 'userReportId', userReportId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('putUserReportReportUserReportIdPut', 'request', request)
            const localVarPath = `/report/{user_report_id}`
                .replace(`{${"user_report_id"}}`, encodeURIComponent(String(userReportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (request !== undefined) { 
                localVarFormParams.append('request', request as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * ユースケース2: 申告内容の一覧を取得する
         * @summary Get User Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserReportsReportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserReportsReportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Post User Report Feedback Comment
         * @param {string} reportId 
         * @param {EntryUserReportFeedBackCommentRequest} entryUserReportFeedBackCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserReportFeedbackCommentReportReportIdFeedbackCommentPost(reportId: string, entryUserReportFeedBackCommentRequest: EntryUserReportFeedBackCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryUserReportFeedBackCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserReportFeedbackCommentReportReportIdFeedbackCommentPost(reportId, entryUserReportFeedBackCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Post User Report Feedback Reaction
         * @param {string} reportId 
         * @param {EntryUserReportFeedBackReactionRequest} entryUserReportFeedBackReactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserReportFeedbackReactionReportReportIdFeedbackReactionPost(reportId: string, entryUserReportFeedBackReactionRequest: EntryUserReportFeedBackReactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryUserReportFeedBackReactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserReportFeedbackReactionReportReportIdFeedbackReactionPost(reportId, entryUserReportFeedBackReactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユースケース1: ユーザがHelpを申請する
         * @summary Post User Report
         * @param {EntryUserReportRequest} request 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserReportReportPost(request: EntryUserReportRequest, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryUserReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserReportReportPost(request, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユースケース3: ユーザがヘルプ情報を更新する
         * @summary Put User Report
         * @param {string} userReportId 
         * @param {File} request 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserReportReportUserReportIdPut(userReportId: string, request: File, file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserReportReportUserReportIdPut(userReportId, request, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * ユースケース2: 申告内容の一覧を取得する
         * @summary Get User Reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReportsReportGet(options?: any): AxiosPromise<ListUserReportResponse> {
            return localVarFp.getUserReportsReportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Post User Report Feedback Comment
         * @param {string} reportId 
         * @param {EntryUserReportFeedBackCommentRequest} entryUserReportFeedBackCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserReportFeedbackCommentReportReportIdFeedbackCommentPost(reportId: string, entryUserReportFeedBackCommentRequest: EntryUserReportFeedBackCommentRequest, options?: any): AxiosPromise<EntryUserReportFeedBackCommentResponse> {
            return localVarFp.postUserReportFeedbackCommentReportReportIdFeedbackCommentPost(reportId, entryUserReportFeedBackCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Post User Report Feedback Reaction
         * @param {string} reportId 
         * @param {EntryUserReportFeedBackReactionRequest} entryUserReportFeedBackReactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserReportFeedbackReactionReportReportIdFeedbackReactionPost(reportId: string, entryUserReportFeedBackReactionRequest: EntryUserReportFeedBackReactionRequest, options?: any): AxiosPromise<EntryUserReportFeedBackReactionResponse> {
            return localVarFp.postUserReportFeedbackReactionReportReportIdFeedbackReactionPost(reportId, entryUserReportFeedBackReactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * ユースケース1: ユーザがHelpを申請する
         * @summary Post User Report
         * @param {EntryUserReportRequest} request 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserReportReportPost(request: EntryUserReportRequest, file?: File, options?: any): AxiosPromise<EntryUserReportResponse> {
            return localVarFp.postUserReportReportPost(request, file, options).then((request) => request(axios, basePath));
        },
        /**
         * ユースケース3: ユーザがヘルプ情報を更新する
         * @summary Put User Report
         * @param {string} userReportId 
         * @param {File} request 
         * @param {File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserReportReportUserReportIdPut(userReportId: string, request: File, file?: File, options?: any): AxiosPromise<UpdateUserReportResponse> {
            return localVarFp.putUserReportReportUserReportIdPut(userReportId, request, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * ユースケース2: 申告内容の一覧を取得する
     * @summary Get User Reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public getUserReportsReportGet(options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).getUserReportsReportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザのヘルプにコメントをつける
     * @summary Post User Report Feedback Comment
     * @param {string} reportId 
     * @param {EntryUserReportFeedBackCommentRequest} entryUserReportFeedBackCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public postUserReportFeedbackCommentReportReportIdFeedbackCommentPost(reportId: string, entryUserReportFeedBackCommentRequest: EntryUserReportFeedBackCommentRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).postUserReportFeedbackCommentReportReportIdFeedbackCommentPost(reportId, entryUserReportFeedBackCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザのヘルプにコメントをつける
     * @summary Post User Report Feedback Reaction
     * @param {string} reportId 
     * @param {EntryUserReportFeedBackReactionRequest} entryUserReportFeedBackReactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public postUserReportFeedbackReactionReportReportIdFeedbackReactionPost(reportId: string, entryUserReportFeedBackReactionRequest: EntryUserReportFeedBackReactionRequest, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).postUserReportFeedbackReactionReportReportIdFeedbackReactionPost(reportId, entryUserReportFeedBackReactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユースケース1: ユーザがHelpを申請する
     * @summary Post User Report
     * @param {EntryUserReportRequest} request 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public postUserReportReportPost(request: EntryUserReportRequest, file?: File, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).postUserReportReportPost(request, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユースケース3: ユーザがヘルプ情報を更新する
     * @summary Put User Report
     * @param {string} userReportId 
     * @param {File} request 
     * @param {File} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public putUserReportReportUserReportIdPut(userReportId: string, request: File, file?: File, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).putUserReportReportUserReportIdPut(userReportId, request, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Put User
         * @param {string} lineUserId 
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserUserLineUserIdPut: async (lineUserId: string, updateUserRequest: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lineUserId' is not null or undefined
            assertParamExists('putUserUserLineUserIdPut', 'lineUserId', lineUserId)
            // verify required parameter 'updateUserRequest' is not null or undefined
            assertParamExists('putUserUserLineUserIdPut', 'updateUserRequest', updateUserRequest)
            const localVarPath = `/user/{line_user_id}`
                .replace(`{${"line_user_id"}}`, encodeURIComponent(String(lineUserId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Put User
         * @param {string} lineUserId 
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserUserLineUserIdPut(lineUserId: string, updateUserRequest: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserUserLineUserIdPut(lineUserId, updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * ユーザのヘルプにコメントをつける
         * @summary Put User
         * @param {string} lineUserId 
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserUserLineUserIdPut(lineUserId: string, updateUserRequest: UpdateUserRequest, options?: any): AxiosPromise<UpdateUserResponse> {
            return localVarFp.putUserUserLineUserIdPut(lineUserId, updateUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * ユーザのヘルプにコメントをつける
     * @summary Put User
     * @param {string} lineUserId 
     * @param {UpdateUserRequest} updateUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putUserUserLineUserIdPut(lineUserId: string, updateUserRequest: UpdateUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).putUserUserLineUserIdPut(lineUserId, updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


